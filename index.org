#+Title: Creating a distributed python wrapper with otwrapy
#+Author: Felipe Aguirre Martinez
#+Email: aguirre@phimeca.com

#+OPTIONS: toc:nil reveal_mathjax:t reveal_slide_number:c/t reveal_progress:t reveal_history:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:1
#+REVEAL_MARGIN: 0.
#+REVEAL_THEME: night
#+REVEAL_TRANS: none


* Introduction
- A wrapper is a piece of code that creates a python interface that
  communicates with your code.
- A good wrapper should be able to take advantage of multi core
  computers and HPC clusters in order to distribute multiple
  evaluations of your code.
- Objective of this presentation --> Show you how to create the killer
  distributed wrapper to efficiently carry on uncertainty studies.
- It is based on the module [[http://felipeam86.github.io/otwrapy/][otwrapy]] available at [[https://github.com/felipeam86/otwrapy][GitHub]]. Proudly
  developed at [[http://www.phimeca.com][Phimeca engineering]].
- A good working example can be found on the  [[https://github.com/felipeam86/otwrapy/tree/master/otwrapy/examples/beam][otwrapy repository]].

* What makes a good wrapper ?
- It is distributed and avoids conflict between runs.
- You can use it as a script (argsparse module):
  #+BEGIN_SRC bash
  $ python wrapper.py –X 170 3 0.05
  #+END_SRC
- It is able to run on different environments:
  - Workstation
  - Office made heterogeneous clusters --> e.g. IPyparallel or dispy
  - HPC through submission scripts --> e.g. TGCC or Poincare
  - Cloud solutions --> e.g. Simulagora or DominoUp
- It catches and logs errors for easy debugging.
- It can either run or simply prepare runs --> useful when running on
  clusters.

All of this  might seem complex, but wrappers are repetitive and
[[http://felipeam86.github.io/otwrapy/][otwrapy]] is here for you !

* Basic skeleton of a wrapper
- What follows assumes that you want to wrap an external code not
  written in Python.
- An OpenTURNS wrapper is a subclass of =ot.OpenTURNSPythonFunction=
  for which at least the method =_exec(X)= should be
  overloaded. Additionally, you can overload =_exec_sample(X)=, but
  with [[http://felipeam86.github.io/otwrapy/_generated/otwrapy.Parallelizer.html][otwrapy.Parallelizer()]] there is no need to.
- If your code handles the gradient and the hessian, you can
  respectively overload =_gradient(X)= and =_hessian(X)=.

#+BEGIN_SRC python
class Wrapper(ot.OpenTURNSPythonFunction):
    """Wrapper of my external code.
    """
    def __init__(self):
        """Initialize the wrapper with 4 and 1 as input and output dimension.
        """
        super(Wrapper, self).__init__(4, 1)
        # Do other stuff if necessary
    def _exec(self, X):
        """Run the model in the shell for the input vector X
        """
        pass
#+END_SRC

** Overloading the _exec function

- =_exec= is the default OpenTURNS method that executes the function
  on a given point. Semantically speaking, the function is divided on
  three parts :
  - Prepare the input parameters, e.g., create an input file.
  - Run the external code, e.g., on the shell.
  - Get the output parameters by parsing the output given by the code.
- The three steps are executed on a temporary working directory using  [[http://felipeam86.github.io/otwrapy/_generated/otwrapy.TempWorkDir.html#otwrapy-tempworkdir][otwrapy.TempWorkDir]]
#+BEGIN_SRC python
def _exec(self, X):
    """Run the model in the shell for the input vector X
    """

    # Move to temp work dir. Cleanup at the end
    with otw.TempWorkDir(cleanup=True):
        # Prepare the input
        self._prepare_input(X)
        # Run the external code
        runtime = self._run_code(X)
        # Parse the output parameters
        Y = self._parse_output()

    return Y
#+END_SRC

** Temporary working directory

- Efficiently and safely work on temporary directories with [[http://felipeam86.github.io/otwrapy/_generated/otwrapy.TempWorkDir.html#otwrapy-tempworkdir][otwrapy.TempWorkDir]]
  - Avoid conflict between simulations running in parallel.
  - If an exception is raised during execution, the Python interpreter
    should come back to the preceding current directories.
  - Cleanup the temporary working directories upon exit. Or don't if
    you want a full backup of the simulations.
- Example:

#+BEGIN_SRC python
import otwrapy as otw
# I'm on a given dir, e.g. ~/beam-wrapper
with otw.TempWorkDir(cleanup=True):
    """
    ...
    Do stuff safely on an exclusive temporary directory and erase it afterwards
    ...
    """
    # The current working directory is something like /tmp/pZYpzQ

# Back on ~/beam-wrapper and /tmp/pZYpzQ does not exist anymore
#+END_SRC

** Prepare the input parameters
- For each simulation, your wrapper must communicate the input
  parameters to the external code.
- Most scientific codes use input files that describe, among other
  thing, the parameters of your model/simulation.
- Using OpenTURNS coupling tools, the values of the vector X are
  placed on an input template file that have tokens/placeholders for where
  the expected parameters should be.

#+BEGIN_SRC python
def _prepare_input(self, X):
    """Create the input file required by the code.
    """
    ot.coupling_tools.replace(
        infile='input_templatefile.xml',
        outfile='input.xml',
        tokens=['@X1','@X2','@X3','@X4'],
        values=X)
#+END_SRC

** Run the external code
- Most of the time this is a fairly straightforward call to an
  executable with an input file.
- Sometimes, it is usefull to time your runtime.

#+BEGIN_SRC python
    def _run_code(self):
        time_start = time.time()
        ot.coupling_tools.execute('/path/to/executable -x input.xml'))
        return time.time() - time_start
#+END_SRC

[[http://www.phimeca.com][file:Temps_DOE_Sobol_1000-white.png]]
** Parse output parameters
- Common practice among scientific code is to create output files with
  the results of the simulation.
- The output should then be parsed in order to get the output
  parameters of interest.
- If it is a =.csv= file, [[http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html][=pandas.read_csv=]] is the fastest option, but it
  introduces pandas as a dependency. Otherwise, if speed is not an
  issue, try [[http://doc.openturns.org/openturns-latest/sphinx/user_manual/_generated/openturns.coupling_tools.get_value.html#openturns.coupling_tools.get_value][=ot.coupling_tools.get_value=]] or [[http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.loadtxt.html][=numpy.loadttxt=]].
- For =.xml= files [[https://docs.python.org/2/library/xml.dom.minidom.html][minidom]] package from the python standard library does the trick.
- If by any chance the external code returns the output parameters of
  interest to STDOUT, set =get_stdout=True= when calling
  =ot.coupling_tools.execute(...)=.  (or use use [[https://docs.python.org/2/library/subprocess.html#subprocess.check_output][=subprocess.check_output=]])
- For standard binary formats, there are python intercafes to [[https://github.com/Unidata/netcdf4-python][netcdf]]
  and [[http://www.h5py.org/][HDF5]].
- Otherwise, be creative and pythonic !
#+BEGIN_SRC python
    def _parse_output(self):
        # Retrieve output (see also )
        xmldoc = minidom.parse('outputs.xml')
        itemlist = xmldoc.getElementsByTagName('outputs')
        Y = float(itemlist[0].attributes['Y1'].value)

        return [Y]
#+END_SRC

* Managing data backups
- Uncertainty studies tend to be expensive in computational time, it is then in your best interest to backup your simulation results !
- =otwrapy= has two usefull functions to do so:  [[http://felipeam86.github.io/otwrapy/_generated/otwrapy.dump_array.html][=otwrapy.dump_array=]] and  [[http://felipeam86.github.io/otwrapy/_generated/otwrapy.load_array.html][=otwrapy.load_array=]]
- They are faster than a simple pickle.dump and pickle.load (because they use =protocol=2=)
- They offer the possibility to compress data with the =gzip= library. If the extension is =`pklz`=, it compresses by default.
- Advice: Convert your =ot.NumericalSample= to a =np.array= before dumping. An =np.array= is lighter !
- Example: dump and compress 
#+BEGIN_SRC python
import otwrapy as otw
otw.dump_array(np.array(X), 'InputSample.pklz', compress=True)
#+END_SRC

-

#+BEGIN_SRC python
import otwrapy as otw
import openturns as ot
X = otw.load_array('InputSample.pklz')
X = ot.NumericalSample(X)
#+END_SRC

* Catch exceptions when your code fails

#+BEGIN_SRC python
class Wrapper(ot.OpenTURNSPythonFunction):
    def _exec(self, X):
        try:
            #Do stuff
        except Exception, e:
            logger.error(e, exc_info=True)
            raise e
        return Y
#+END_SRC

Even better, use [[http://felipeam86.github.io/otwrapy/_generated/otwrapy.Debug.html][otwrapy.Debug()]]

#+BEGIN_SRC python
class Wrapper(ot.OpenTURNSPythonFunction):
    @Debug('wrapper.log')
    def _exec(self, X):
        #Do stuff
        return Y
#+END_SRC
* Creating a CLI for your wrapper

#+BEGIN_SRC python
if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description="Python wrapper example.")
    parser.add_argument('-X', nargs=3, metavar=('X1', 'X2', 'X3'),
        help='Vector on which the model will be evaluated')
    args = parser.parse_args()

    model = Wrapper(3, 1)
    X = ot.NumericalPoint([float(x) for x in args.X])
    Y = model(X)
    dump_array(X, 'InputSample.pkl')
    dump_array(Y, 'OutputSample.pkl')
#+END_SRC

- You can then execute your code from the command line :

#+BEGIN_SRC bash
  python wrapper.py –X 170 3 0.05
#+END_SRC

* Parallelizing the wrapper
Just let the magic happen with [[http://felipeam86.github.io/otwrapy/_generated/otwrapy.Parallelizer.html][otwrapy.Parallelizer()]] !!

#+BEGIN_SRC python
parallelized_model = Parallelizer(Wrapper(*args, **kwards))
#+END_SRC

* Conclusion
- [[http://doc.openturns.org/openturns-latest/sphinx/user_manual/_generated/openturns.PythonFunction.html#openturns.PythonFunction][ot.PythonFunction()]] is a simpler alternative to
  [[http://doc.openturns.org/openturns-latest/sphinx/user_manual/_generated/openturns.OpenTURNSPythonFunction.html#openturns.OpenTURNSPythonFunction][ot.OpenTURNSPythonFunction()]], but you loose the ability to
  parameterize your wrapper when instantiating it.

-
-
-

* Thank you for your attention

[[http://www.phimeca.com][file:LogoPhiHaut-white.png]]

Felipe Aguirre Martinez

[[mailto:aguirre@phimeca.com][aguirre@phimeca.com]]

Github : [[https://github.com/felipeam86/otwrapy][otwrapy]]
